package com.stockercloud.aws.item.createitem;

import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.stockercloud.aws.item.BaseHandler;
import com.stockercloud.aws.item.InventoryItem;
import com.stockercloud.aws.item.ValidationException;
import com.stockercloud.aws.item.utils.MapUtil;

public class CreateItemHandler extends BaseHandler implements RequestHandler<CreateItemRequest, CreateItemResponse> {
	
	public CreateItemResponse handleRequest(CreateItemRequest request, Context context)
	{
		InventoryItem item = request.getItem();
		long id = generateItemId();
		Item dbItem = MapUtil.mapToDBItem(item, id);
		super.getItemTable().putItem(dbItem);
		CreateItemResponse response = new CreateItemResponse();
		response.setId(id);
		return response;
	}
	
	private long generateItemId()
	{
		return System.currentTimeMillis();	// mostly for simplicity to try and guarantee the item id is unique
	}
	
	private void validateInput(CreateItemRequest request)
	{
		InventoryItem item = request.getItem();
		if (item == null)
		{
			throw new ValidationException("Item cannot be null");
		}
		if (item.getName() == null || item.getName().length() == 0)
		{
			throw new ValidationException("Name cannot be empty");
		}
		if (item.getCurrentQuantity() < 0)
		{
			throw new ValidationException("Current quantity must be non-negative");
		}
		if (item.getOrderQuantity() < 0)
		{
			throw new ValidationException("Order quantity must be non-negative");
		}
		if (item.getDesiredQuantity() < 0)
		{
			throw new ValidationException("Desired quantity must be non-negative");
		}
		if (item.getSupplier() == null || item.getSupplier().length() == 0)
		{
			throw new ValidationException("Supplier cannot be empty");
		}
		if (item.getOrderQuantity() >= item.getDesiredQuantity())
		{
			throw new ValidationException("");
		}
	}
}
