package com.stockercloud.aws.item.createitem;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.Table;
import com.stockercloud.aws.api.DynamoDBHelper;
import com.stockercloud.aws.item.InventoryItem;
import com.stockercloud.aws.item.ValidationException;

//use mockito runner to automatically inject mocks
@RunWith(MockitoJUnitRunner.class)
public class CreateItemHandlerTest {
	
	@Mock DynamoDBHelper helper;
	@Mock Table table;
	
	@InjectMocks private CreateItemHandler handler;
	
	private String name = "mouse";
	private int currentQuantity = 2;
	private int orderQuantity = 3;
	private int desiredQuantity = 4;
	private String supplier = "microcenter";

	@Before
	public void setUp() throws Exception {
		when(helper.getTable(anyString())).thenReturn(table);
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testHandleRequestValidInputs() {
		CreateItemRequest request = new CreateItemRequest();
		request.setItem(createValidItem());
		CreateItemResponse response = handler.handleRequest(request, null);
		assertNotNull(response.getId()); // just check that the response is given a long
		verify(table).putItem(any(Item.class)); // verifies that the putItem method is called
	}
	
	@Test
	public void testInvalidName() {
		CreateItemRequest request = new CreateItemRequest();
		InventoryItem item = createValidItem();
		item.setName("");
		request.setItem(item);
		try {
			handler.handleRequest(request, null);
			fail("Test should have failed");
		}
		catch(ValidationException e) {
			assertEquals("Name cannot be empty", e.getMessage());
		}
		verify(table, never()).putItem(any(Item.class)); // verifies that the putItem method is never called
	}
	
	@Test
	public void testInvalidCurrentQuantity() {
		
	}
	
	@Test
	public void testInvalidOrderQuantity() {
		
	}
	
	@Test
	public void testDesiredQuantity() {
		
	}
	
	@Test
	public void testInvalidSupplier() {
		
	}
	
	@Test
	public void testQuantityConstraint() {
		
	}
	
	private InventoryItem createValidItem()
	{
		InventoryItem item = new InventoryItem();
		item.setName(name);
		item.setCurrentQuantity(currentQuantity);
		item.setOrderQuantity(orderQuantity);
		item.setDesiredQuantity(desiredQuantity);
		item.setSupplier(supplier);
		return item;
	}

}
